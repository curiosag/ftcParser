/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
 
grammar FusionTablesSql;

// derived from bart kiers SQLite grammar format 

// http://www.sqlite.org/lang_keywords.html

K_ALTER : A L T E R;
K_AND : A N D;
K_AS : A S;
K_ASC : A S C;
K_AVERAGE: A V E R A G E;
K_BY : B Y;
K_CASE : C A S E;
K_COLUMN : C O L U M N;
K_CONTAINS : C O N T A I N S;
K_COUNT : C O U N T;
K_CREATE : C R E A T E;
K_DELETE : D E L E T E;
K_DESC : D E S C;
K_DOES : D O E S;
K_CONTAIN : C O N T A I N;
K_DROP : D R O P;
K_ENDS : E N D S;
K_FROM : F R O M;
K_GROUP : G R O U P;
K_HAVING : H A V I N G;
K_IGNORING : I G N O R I N G;
K_IN : I N;
K_INSERT : I N S E R T;
K_INTO : I N T O;
K_IS : I S;
K_ISNULL : I S N U L L;
K_JOIN : J O I N;
K_LEFT : L E F T;
K_LIKE : L I K E;
K_LIMIT : L I M I T;
K_MATCHES : M A T C H E S;
K_MAXIMUM : M A X I M U M;
K_MINIMUM : M I N I M U M;
K_NOT : N O T;
K_NOTNULL : N O T N U L L;
K_EQUAL : E Q U A L;
K_NULL : N U L L;
K_OF : O F;
K_OFFSET : O F F S E T;
K_ON : O N;
K_OR : O R;
K_ORDER : O R D E R;
K_OUTER : O U T E R;
K_RENAME : R E N A M E;
K_RIGHT : R I G H T;
K_SELECT : S E L E C T;
K_SUM : S U M;
K_SET : S E T;
K_STARTS : S T A R T S;
K_TABLE : T A B L E;
K_TO : T O;
K_UPDATE : U P D A T E;
K_VALUES : V A L U E S;
K_VIEW : V I E W;
K_WHERE : W H E R E;
K_WITH : W I T H;

fusionTablesSql
 : ( sql_stmt_list | error )* EOF
 ;

error
 : UNEXPECTED_CHAR 
   { 
     throw new RuntimeException("UNEXPECTED_CHAR=" + $UNEXPECTED_CHAR.text); 
   }
 ;

sql_stmt_list
 : ';'* sql_stmt ( ';'+ sql_stmt )* ';'*
 ;

sql_stmt
 :  alter_table_stmt
                                      | select_stmt
                                      | create_view_stmt
                                      | delete_stmt
                                      | drop_table_stmt
                                      | insert_stmt
                                      | update_stmt
 ;

alter_table_stmt
 : K_ALTER K_TABLE table_name
   ( K_RENAME K_TO new_table_name )
 ;

create_view_stmt
 : K_CREATE K_VIEW
    view_name K_AS '(' select_stmt ')'
 ;

drop_table_stmt
 : K_DROP K_TABLE table_name
 ;

insert_stmt
 : K_INSERT  K_INTO
   table_name ( '(' column_name ( ',' column_name )* ')' )?
   ( K_VALUES '(' expr ( ',' expr )* ')' ( ',' '(' expr ( ',' expr )* ')' )*
   )
 ;

update_stmt
 : K_UPDATE table_name
   K_SET column_name '=' expr ( ',' column_name '=' expr )* ( K_WHERE expr )?
 ;

delete_stmt
 : K_DELETE K_FROM table_name 
   ( K_WHERE expr )?
 ;

query_from_table
 : table_name ( K_AS? table_alias )?
 ;

select_stmt
 : K_SELECT result_column ( ',' result_column )*
   ( K_FROM ( query_from_table | join_clause ) )?
   ( K_WHERE expr )?
   ( K_GROUP K_BY expr ( ',' expr )* ( K_HAVING expr )? )?
   ( K_ORDER K_BY ordering_term ( ',' ordering_term )* )?
   ( K_LIMIT expr ( ( K_OFFSET | ',' ) expr )? )?
 ;

qualified_column_name : ( table_name '.' )? column_name
;

expr
 : literal_value
 | expr qualified_column_name ( '=' | '<' | '<=' | '>' | '>=' ) expr 
 | expr ( K_SUM | K_COUNT | K_AVERAGE | K_MAXIMUM | K_MINIMUM ) '(' qualified_column_name ')' (expr)? 
 | expr  qualified_column_name (K_IN | K_LIKE | K_MATCHES | K_STARTS K_WITH | K_ENDS K_WITH | K_CONTAINS | K_CONTAINS K_IGNORING K_CASE | K_DOES K_NOT K_CONTAIN | K_NOT K_EQUAL K_TO) expr
 | expr K_AND expr
 | '(' expr ')'
 | qualified_column_name
 ;

ordering_term
 : expr ( K_ASC | K_DESC )?
 ;

result_column
 : '*'
 | table_name '.' '*'
 | expr
 ;

join_clause
 : query_from_table ( join_operator query_from_table join_constraint )*
 ;

join_operator
 : K_LEFT K_OUTER  K_JOIN
 ;

join_constraint
 : K_ON expr
 ;

literal_value
 : numeric_literal
 | string_literal
 | K_NULL
 ;

error_message
 : string_literal
 ;

column_alias
 : identifier
 | string_literal
 ;      

keyword
 :   
 | K_ALTER
 | K_AND
 | K_AS
 | K_ASC
 | K_AVERAGE
 | K_BY
 | K_CASE 
 | K_COLUMN
 | K_CONTAIN
 | K_CONTAINS
 | K_COUNT
 | K_CREATE
 | K_DELETE
 | K_DESC
 | K_DOES
 | K_DROP
 | K_ENDS
 | K_EQUAL
 | K_FROM
 | K_GROUP
 | K_HAVING
 | K_IGNORING
 | K_IN
 | K_INSERT
 | K_INTO
 | K_IS
 | K_ISNULL
 | K_JOIN
 | K_LEFT
 | K_LIKE
 | K_LIMIT
 | K_MATCHES
 | K_MAXIMUM
 | K_MINIMUM
 | K_NOT
 | K_NOTNULL
 | K_NULL
 | K_OF
 | K_OFFSET
 | K_ON
 | K_OR
 | K_ORDER
 | K_OUTER
 | K_RENAME
 | K_RIGHT
 | K_ROWID
 | K_SELECT
 | K_SET
 | K_STARTS
 | K_SUM
 | K_TABLE
 | K_TO
 | K_UPDATE
 | K_VALUES
 | K_VIEW
 | K_WHERE
 | K_WITH
 ;

numeric_literal : NUMERIC_LITERAL ;

table_name 
 : identifier
 ;

column_name 
 : identifier
 ;

new_table_name 
 : identifier
 ;

view_name 
 : identifier
 ;

table_alias 
 : identifier
 ;

identifier : IDENTIFIER ;

string_literal : STRING_LITERAL ;

SCOL : ';';
DOT : '.';
OPEN_PAR : '(';
CLOSE_PAR : ')';
COMMA : ',';
ASSIGN : '=';
STAR : '*';
PLUS : '+';
MINUS : '-';
TILDE : '~';
PIPE2 : '||';
DIV : '/';
MOD : '%';
LT2 : '<<';
GT2 : '>>';
AMP : '&';
PIPE : '|';
LT : '<';
LT_EQ : '<=';
GT : '>';
GT_EQ : '>=';
EQ : '==';
NOT_EQ1 : '!=';
NOT_EQ2 : '<>';

NUMERIC_LITERAL
 : DIGIT+ ( '.' DIGIT* )? ( E [-+]? DIGIT+ )?
 | '.' DIGIT+ ( E [-+]? DIGIT+ )?
 | ( '+' | '-' ) NUMERIC_LITERAL
 ;

// there is no way to tell an identifier from a string literal at lexer level

IDENTIFIER
 : LETTERS
 | STRING_LITERAL
 ;

LETTERS : [a-zA-Z_0-9]+ // TODO check: needs more chars in set 
	   ;

STRING_LITERAL
 : '\'' ( ~'\'' | '\'\'' )* '\''
 ;


SINGLE_LINE_COMMENT
 : '--' ~[\r\n]* -> channel(HIDDEN)
 ;

MULTILINE_COMMENT
 : '/*' .*? ( '*/' | EOF ) -> channel(HIDDEN)
 ;

SPACES
 : [ \u000B\t\r\n] -> channel(HIDDEN)
 ;

UNEXPECTED_CHAR
 : .
 ;

fragment DIGIT : [0-9];

fragment A : [aA];
fragment B : [bB];
fragment C : [cC];
fragment D : [dD];
fragment E : [eE];
fragment F : [fF];
fragment G : [gG];
fragment H : [hH];
fragment I : [iI];
fragment J : [jJ];
fragment K : [kK];
fragment L : [lL];
fragment M : [mM];
fragment N : [nN];
fragment O : [oO];
fragment P : [pP];
fragment Q : [qQ];
fragment R : [rR];
fragment S : [sS];
fragment T : [tT];
fragment U : [uU];
fragment V : [vV];
fragment W : [wW];
fragment X : [xX];
fragment Y : [yY];
fragment Z : [zZ];